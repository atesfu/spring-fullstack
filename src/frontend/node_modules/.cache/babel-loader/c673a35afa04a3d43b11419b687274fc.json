{"ast":null,"code":"import fetch from'unfetch';var checkStatus=function checkStatus(response){if(response.ok){return response;}// convert non-2xx HTTP responses into errors:\nvar error=new Error(response.statusText);error.response=response;return Promise.reject(error);};var baseURL=\"api/students/\";export var getAllStudent=function getAllStudent(){return fetch(baseURL).then(checkStatus);};export var addNewStudent=function addNewStudent(student){return fetch(baseURL,{headers:{'Content-Type':'application/json'},method:'POST',body:JSON.stringify(student)}).then(checkStatus);};export var deleteStudent=function deleteStudent(studentId){return fetch(baseURL+studentId,{method:'DELETE'}).then(checkStatus);};","map":{"version":3,"sources":["/Users/aronambesajir/Desktop/Interview_practice/Full-Stack-Project/demo/src/frontend/src/Client.js"],"names":["fetch","checkStatus","response","ok","error","Error","statusText","Promise","reject","baseURL","getAllStudent","then","addNewStudent","student","headers","method","body","JSON","stringify","deleteStudent","studentId"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,SAAlB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAc,CAC9B,GAAIA,QAAQ,CAACC,EAAb,CAAiB,CACb,MAAOD,CAAAA,QAAP,CACH,CACD;AACA,GAAME,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAd,CACAF,KAAK,CAACF,QAAN,CAAiBA,QAAjB,CACA,MAAOK,CAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP,CACH,CARD,CASA,GAAMK,CAAAA,OAAO,CAAC,eAAd,CACA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC/B,MAAQV,CAAAA,KAAK,CAACS,OAAD,CAAL,CACHE,IADG,CACEV,WADF,CAAR,CAEH,CAHM,CAIP,MAAO,IAAMW,CAAAA,aAAa,CAAC,QAAdA,CAAAA,aAAc,CAAAC,OAAO,CAAE,CAChC,MAAOb,CAAAA,KAAK,CAACS,OAAD,CACR,CACIK,OAAO,CAAC,CAAC,eAAe,kBAAhB,CADZ,CAEIC,MAAM,CAAE,MAFZ,CAGIC,IAAI,CAACC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAHT,CADQ,CAAL,CAKAF,IALA,CAKKV,WALL,CAAP,CAMH,CAPM,CAQP,MAAO,IAAMkB,CAAAA,aAAa,CAAC,QAAdA,CAAAA,aAAc,CAACC,SAAD,CAAa,CACpC,MAAOpB,CAAAA,KAAK,CAACS,OAAO,CAACW,SAAT,CACR,CACIL,MAAM,CAAE,QADZ,CADQ,CAAL,CAGAJ,IAHA,CAGKV,WAHL,CAAP,CAIH,CALM","sourcesContent":["import fetch from 'unfetch';\n\nconst checkStatus = (response) => {\n    if (response.ok) {\n        return response;\n    }\n    // convert non-2xx HTTP responses into errors:\n    const error = new Error(response.statusText);\n    error.response = response;\n    return Promise.reject(error);\n}\nconst baseURL=\"api/students/\";\nexport const getAllStudent = () => {\n    return  fetch(baseURL)\n        .then(checkStatus);\n}\nexport const addNewStudent=student=>{\n    return fetch(baseURL,\n        {\n            headers:{'Content-Type':'application/json'},\n            method: 'POST',\n            body:JSON.stringify(student)\n        }).then(checkStatus);\n}\nexport const deleteStudent=(studentId)=>{\n    return fetch(baseURL+studentId,\n        {\n            method: 'DELETE',\n        }).then(checkStatus)\n}"]},"metadata":{},"sourceType":"module"}